#!/usr/bin/env php
<?php

use Sigwin\YASSG\Database;
use Sigwin\YASSG\Renderer;
use Sigwin\YASSG\Router;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Yaml\Yaml;

$autoLoaders = [
    // single repo installed auto-loader
    __DIR__.'/../../../autoload.php',

    // mono-repo installed auto-loader
    __DIR__.'/../../../../../../autoload.php',
];

$found = false;
$baseDir = null;
foreach ($autoLoaders as $autoLoader) {
    if (true === file_exists($autoLoader)) {
        /* @noinspection PhpIncludeInspection */
        include $autoLoader;
        
        // strips "vendor/"
        $baseDir = realpath(dirname($autoLoader).'/..');

        $found = true;
    }
}
if ($found === false) {
    fwrite(STDERR, 'You must set up the project dependencies using `composer install`'.PHP_EOL);

    exit(1);
}

$input = new ArgvInput();
$baseUrl = ($input->getParameterOption('--base-url') ?: 'file://'. $baseDir .'/public');
$database = new Database(Yaml::parseFile($baseDir.'/database.yaml'));
$router = new Router(Yaml::parseFile($baseDir.'/routes.yaml'), $baseUrl);
$renderer = new Renderer(
    $database,
    $router,
    [
        'templates' => $baseDir.'/templates',
        'base_url' => $baseUrl,
        'cache' => $baseDir.'/cache',
        'auto_reload' => true,
    ]
);

$generator = new \Sigwin\YASSG\Generator($baseUrl);
$generator->generate($renderer, $baseDir.'/'.(trim($input->getFirstArgument() ?? 'build', '/')));
